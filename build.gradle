apply from: "gradle/vertx.gradle"
apply plugin: 'scala'
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

dependencies {
	compile "org.entcore:common:$entCoreVersion"
  compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
  testCompile "org.entcore:tests:$entCoreVersion"
}

javadoc {
  options.encoding = 'UTF-8'
  classpath = configurations.provided
  classpath += configurations.compile
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

task deploymentJar(type: Jar) {
  classifier = 'deployment'
  from 'deployment'
}

artifacts {
  archives testJar
  archives deploymentJar
}

repositories {
    maven {
        url "http://maven.web-education.net/nexus/content/groups/public"
    }
}

def configurePom(def pom) {
	pom.project {
		description 'Statistics'
		inceptionYear '2015'
		packaging 'zip'
		url 'http://code.web-education.net/ong/statistics'

		developers {
			developer {
				id 'dmtran'
				name 'Duy-Minh TRAN'
				email 'duy-minh.tran@atos.net'
			}
		}

		scm {
			url 'git@code.web-education.net:ong/statistics.git'
		}

		properties {
			setProperty('project.build.sourceEncoding', 'UTF8')
		}
	}
}

def generateMissingI18n() {
  JsonSlurper jsonSlurper = new JsonSlurper()
    File rootDir = new File(".")
    rootDir.eachFileRecurse {
      if (it.isDirectory() && ("i18n".equals(it.getName()) || ("timeline".equals(it.getName()) && it.getParent().endsWith("i18n")))) {
        Map i18n = [:]
          it.eachFileMatch(~/.+.json/) { file ->
            def t = file.text
              i18n.put(file.getName(), (Map) jsonSlurper.parseText((t != null && !t.empty) ? t : "{}"))
          }
        Map fr = i18n.remove("fr.json")
          new File(it, "fr.json").withWriter{ it << JsonOutput.prettyPrint(JsonOutput.toJson(fr.sort())) }
        i18n.each { key, lang ->
          Map out = fr.findAll({true})
            out.putAll(lang)
            new File(it, key).withWriter{ it << JsonOutput.prettyPrint(JsonOutput.toJson(out.sort())) }
        }
      }
    }
}

task generateI18n(description:'Generate missing keys in i18n files') << {
  generateMissingI18n()
}

